// Mocks generated by Mockito 5.3.0 from annotations
// in igplus_ios/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:convert' as _i16;
import 'dart:typed_data' as _i17;

import 'package:dartz/dartz.dart' as _i2;
import 'package:http/http.dart' as _i5;
import 'package:igplus_ios/data/failure.dart' as _i8;
import 'package:igplus_ios/data/models/account_info_model.dart' as _i3;
import 'package:igplus_ios/data/models/ig_headers_model.dart' as _i4;
import 'package:igplus_ios/data/sources/firebase/firebase_data_source.dart'
    as _i14;
import 'package:igplus_ios/data/sources/instagram/instagram_data_source.dart'
    as _i11;
import 'package:igplus_ios/domain/entities/account_info.dart' as _i9;
import 'package:igplus_ios/domain/entities/friend.dart' as _i10;
import 'package:igplus_ios/domain/entities/ig_headers.dart' as _i13;
import 'package:igplus_ios/domain/repositories/auth/auth_repository.dart'
    as _i15;
import 'package:igplus_ios/domain/repositories/firebase/headers_repository.dart'
    as _i12;
import 'package:igplus_ios/domain/repositories/instagram/instagram_repository.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeAccountInfoModel_1 extends _i1.SmartFake
    implements _i3.AccountInfoModel {
  _FakeAccountInfoModel_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeIgHeadersModel_2 extends _i1.SmartFake
    implements _i4.IgHeadersModel {
  _FakeIgHeadersModel_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeUnit_3 extends _i1.SmartFake implements _i2.Unit {
  _FakeUnit_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeResponse_4 extends _i1.SmartFake implements _i5.Response {
  _FakeResponse_4(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeStreamedResponse_5 extends _i1.SmartFake
    implements _i5.StreamedResponse {
  _FakeStreamedResponse_5(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [InstagramRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockInstagramRepository extends _i1.Mock
    implements _i6.InstagramRepository {
  MockInstagramRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.Failure, _i9.AccountInfo>> getAccountInfo(
          {String? username, String? igUserId}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getAccountInfo, [], {#username: username, #igUserId: igUserId}),
              returnValue: _i7.Future<_i2.Either<_i8.Failure, _i9.AccountInfo>>.value(
                  _FakeEither_0<_i8.Failure, _i9.AccountInfo>(
                      this, Invocation.method(#getAccountInfo, [], {#username: username, #igUserId: igUserId}))))
          as _i7.Future<_i2.Either<_i8.Failure, _i9.AccountInfo>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i10.Friend>>> getNewFollowers() =>
      (super.noSuchMethod(Invocation.method(#getNewFollowers, []),
              returnValue:
                  _i7.Future<_i2.Either<_i8.Failure, List<_i10.Friend>>>.value(
                      _FakeEither_0<_i8.Failure, List<_i10.Friend>>(
                          this, Invocation.method(#getNewFollowers, []))))
          as _i7.Future<_i2.Either<_i8.Failure, List<_i10.Friend>>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i10.Friend>>> getFollowings(
          {String? igUserId}) =>
      (super.noSuchMethod(Invocation.method(#getFollowings, [], {#igUserId: igUserId}),
              returnValue:
                  _i7.Future<_i2.Either<_i8.Failure, List<_i10.Friend>>>.value(
                      _FakeEither_0<_i8.Failure, List<_i10.Friend>>(
                          this,
                          Invocation.method(
                              #getFollowings, [], {#igUserId: igUserId}))))
          as _i7.Future<_i2.Either<_i8.Failure, List<_i10.Friend>>>);
  @override
  _i7.Future<_i2.Either<_i8.Failure, List<_i10.Friend>>> getFollowers(
          {String? igUserId}) =>
      (super.noSuchMethod(Invocation.method(#getFollowers, [], {#igUserId: igUserId}),
              returnValue:
                  _i7.Future<_i2.Either<_i8.Failure, List<_i10.Friend>>>.value(
                      _FakeEither_0<_i8.Failure, List<_i10.Friend>>(
                          this,
                          Invocation.method(
                              #getFollowers, [], {#igUserId: igUserId}))))
          as _i7.Future<_i2.Either<_i8.Failure, List<_i10.Friend>>>);
}

/// A class which mocks [InstagramDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockInstagramDataSource extends _i1.Mock
    implements _i11.InstagramDataSource {
  MockInstagramDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i3.AccountInfoModel> getAccountInfoByUsername(String? username) =>
      (super.noSuchMethod(
              Invocation.method(#getAccountInfoByUsername, [username]),
              returnValue: _i7.Future<_i3.AccountInfoModel>.value(
                  _FakeAccountInfoModel_1(
                      this,
                      Invocation.method(
                          #getAccountInfoByUsername, [username]))))
          as _i7.Future<_i3.AccountInfoModel>);
  @override
  _i7.Future<_i3.AccountInfoModel> getAccountInfoById(String? igUserId) =>
      (super.noSuchMethod(Invocation.method(#getAccountInfoById, [igUserId]),
              returnValue: _i7.Future<_i3.AccountInfoModel>.value(
                  _FakeAccountInfoModel_1(this,
                      Invocation.method(#getAccountInfoById, [igUserId]))))
          as _i7.Future<_i3.AccountInfoModel>);
}

/// A class which mocks [HeadersRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHeadersRepository extends _i1.Mock implements _i12.HeadersRepository {
  MockHeadersRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.Failure, _i13.IgHeaders>> getHeaders() =>
      (super.noSuchMethod(Invocation.method(#getHeaders, []),
              returnValue:
                  _i7.Future<_i2.Either<_i8.Failure, _i13.IgHeaders>>.value(
                      _FakeEither_0<_i8.Failure, _i13.IgHeaders>(
                          this, Invocation.method(#getHeaders, []))))
          as _i7.Future<_i2.Either<_i8.Failure, _i13.IgHeaders>>);
}

/// A class which mocks [FirebaseDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseDataSource extends _i1.Mock
    implements _i14.FirebaseDataSource {
  MockFirebaseDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i4.IgHeadersModel> getLatestHeaders() =>
      (super.noSuchMethod(Invocation.method(#getLatestHeaders, []),
              returnValue: _i7.Future<_i4.IgHeadersModel>.value(
                  _FakeIgHeadersModel_2(
                      this, Invocation.method(#getLatestHeaders, []))))
          as _i7.Future<_i4.IgHeadersModel>);
  @override
  _i7.Future<_i2.Unit> login() => (super.noSuchMethod(
          Invocation.method(#login, []),
          returnValue: _i7.Future<_i2.Unit>.value(
              _FakeUnit_3(this, Invocation.method(#login, []))))
      as _i7.Future<_i2.Unit>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i15.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.Failure, _i2.Unit>> login() =>
      (super.noSuchMethod(Invocation.method(#login, []),
              returnValue: _i7.Future<_i2.Either<_i8.Failure, _i2.Unit>>.value(
                  _FakeEither_0<_i8.Failure, _i2.Unit>(
                      this, Invocation.method(#login, []))))
          as _i7.Future<_i2.Either<_i8.Failure, _i2.Unit>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i5.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i5.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_4(
                  this, Invocation.method(#head, [url], {#headers: headers}))))
          as _i7.Future<_i5.Response>);
  @override
  _i7.Future<_i5.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_4(
                  this, Invocation.method(#get, [url], {#headers: headers}))))
          as _i7.Future<_i5.Response>);
  @override
  _i7.Future<_i5.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i16.Encoding? encoding}) =>
      (super
          .noSuchMethod(Invocation.method(#post, [url], {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_4(
                  this,
                  Invocation.method(#post, [
                    url
                  ], {
                    #headers: headers,
                    #body: body,
                    #encoding: encoding
                  })))) as _i7.Future<_i5.Response>);
  @override
  _i7.Future<_i5.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i16.Encoding? encoding}) =>
      (super
          .noSuchMethod(Invocation.method(#put, [url], {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_4(
                  this,
                  Invocation.method(#put, [
                    url
                  ], {
                    #headers: headers,
                    #body: body,
                    #encoding: encoding
                  })))) as _i7.Future<_i5.Response>);
  @override
  _i7.Future<_i5.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i16.Encoding? encoding}) =>
      (super
          .noSuchMethod(Invocation.method(#patch, [url], {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_4(
                  this,
                  Invocation.method(#patch, [
                    url
                  ], {
                    #headers: headers,
                    #body: body,
                    #encoding: encoding
                  })))) as _i7.Future<_i5.Response>);
  @override
  _i7.Future<_i5.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i16.Encoding? encoding}) =>
      (super
          .noSuchMethod(Invocation.method(#delete, [url], {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_4(
                  this,
                  Invocation.method(#delete, [
                    url
                  ], {
                    #headers: headers,
                    #body: body,
                    #encoding: encoding
                  })))) as _i7.Future<_i5.Response>);
  @override
  _i7.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: _i7.Future<String>.value('')) as _i7.Future<String>);
  @override
  _i7.Future<_i17.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: _i7.Future<_i17.Uint8List>.value(_i17.Uint8List(0)))
          as _i7.Future<_i17.Uint8List>);
  @override
  _i7.Future<_i5.StreamedResponse> send(_i5.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue: _i7.Future<_i5.StreamedResponse>.value(
                  _FakeStreamedResponse_5(
                      this, Invocation.method(#send, [request]))))
          as _i7.Future<_i5.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}
